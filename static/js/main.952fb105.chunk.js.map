{"version":3,"sources":["components/WeatherInfo.js","components/WeatherForm.js","App.js","reportWebVitals.js","index.js","keys.js"],"names":["WeatherInfo","props","error","className","temperature","city","country","description","humidity","wind_speed","WeatherForm","onSubmit","getWeather","type","name","placeholder","autoFocus","App","state","e","a","preventDefault","target","elements","cityValue","value","countryValue","API_URL","WEATHER_KEY","fetch","response","json","data","setState","main","temp","weather","wind","speed","sys","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"iRAwCeA,G,MAtCK,SAAAC,GAChB,OACI,gCAEIA,EAAMC,OACN,qBAAKC,UAAU,qBAAf,SACI,4BAAIF,EAAMC,UAIdD,EAAMG,YACN,sBAAKD,UAAU,iBAAf,UACA,4CACgBF,EAAMI,KADtB,KAC8BJ,EAAMK,WAEpC,8CACkBL,EAAMG,YADxB,WAC0CH,EAAMM,eAEhD,0CACcN,EAAMO,YAGpB,uDAC2BP,EAAMQ,iBAKrC,qBAAKN,UAAU,iBAAf,SACI,mBAAGA,UAAU,UAAb,uCCDGO,EA9BK,SAAAT,GAChB,OACI,qBAAKE,UAAU,iBAAf,SACI,uBAAMQ,SAAUV,EAAMW,WAAtB,UACI,qBAAKT,UAAU,aAAf,SACI,uBAAOU,KAAK,OACLC,KAAK,OACLC,YAAY,oBACZZ,UAAU,eACVa,WAAS,MAKpB,qBAAKb,UAAU,aAAf,SACI,uBAAOU,KAAK,OACLC,KAAK,UACLC,YAAY,kBACZZ,UAAU,mBAKrB,wBAAQA,UAAU,4BAAlB,0B,OC+CDc,E,4MA/DbC,MAAQ,CACNd,YAAY,GACZG,YAAY,GACZC,SAAS,GACTC,WAAW,GACXJ,KAAK,GACLC,QAAQ,GACRJ,MAAO,M,EAGTU,W,uCAAa,WAAOO,GAAP,6BAAAC,EAAA,yDAGXD,EAAEE,iBAHS,EAIgBF,EAAEG,OAAOC,SAA5BlB,EAJG,EAIHA,KAAOC,EAJJ,EAIIA,QACTkB,EAAYnB,EAAKoB,MACjBC,EAAepB,EAAQmB,OAE1BD,IAAaE,EARL,wBASHC,EATG,2DAS0DH,EAT1D,YASuEE,EATvE,kBAS6FE,cAT7F,0BAWcC,MAAMF,GAXpB,cAWHG,EAXG,iBAYUA,EAASC,OAZnB,QAYHC,EAZG,OAeT,EAAKC,SAAS,CACZ7B,YAAa4B,EAAKE,KAAKC,KACvB5B,YAAayB,EAAKI,QAAQ,GAAG7B,YAC7BC,SAAUwB,EAAKE,KAAK1B,SACpBC,WAAYuB,EAAKK,KAAKC,MACtBjC,KAAM2B,EAAKlB,KACXR,QAAQ0B,EAAKO,IAAIjC,QACjBJ,MAAO,OAtBA,wBAyBT,EAAK+B,SAAS,CAAC/B,MAAO,2CAzBb,4C,6GA+Bb,OACI,cAAC,WAAD,UAEA,sBAAKC,UAAU,gBAAf,UAEA,sBAAKA,UAAU,aAAf,UACE,8CACA,8EAGA,qBAAKA,UAAU,MAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,cAAC,EAAD,CAAaS,WAAY4B,KAAK5B,aAC9B,cAAC,EAAD,eAAiB4B,KAAKtB,sB,GAvDhBuB,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,gBChBAc,EAAOC,QAAU,CACb7B,YAAa,sC","file":"static/js/main.952fb105.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst WeatherInfo = props => {\r\n    return ( \r\n        <div>\r\n        {\r\n            props.error &&\r\n            <div className=\"alert alert-danger\">\r\n                <p>{props.error}</p>\r\n            </div>\r\n        }\r\n        {\r\n            props.temperature ?\r\n            <div className=\"card card-body\">\r\n            <p>\r\n                Ubicacion: {props.city}, {props.country}\r\n            </p>\r\n            <p>\r\n                Temperatura: {props.temperature} Â°C, {props.description}\r\n            </p>\r\n            <p>\r\n                Humedad: {props.humidity}\r\n            </p>\r\n\r\n            <p>\r\n                Velocidad del viento: {props.wind_speed}\r\n            </p>\r\n\r\n        </div>\r\n        : \r\n        <div className=\"card card-body\">\r\n            <p className=\"mx-auto\">Ingrese los datos </p>\r\n        </div>\r\n        }\r\n        \r\n        \r\n        </div>\r\n        );\r\n}\r\n \r\nexport default WeatherInfo;","const WeatherForm = props => {\r\n    return ( \r\n        <div className=\"card card-body\">\r\n            <form onSubmit={props.getWeather}>\r\n                <div className=\"form-group\">\r\n                    <input type=\"text\" \r\n                           name=\"city\" \r\n                           placeholder=\"Ingresa tu ciudad\" \r\n                           className=\"form-control\" \r\n                           autoFocus />\r\n\r\n                    \r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <input type=\"text\" \r\n                           name=\"country\" \r\n                           placeholder=\"Ingresa tu pais\" \r\n                           className=\"form-control\" />\r\n\r\n                    \r\n                </div>\r\n\r\n                <button className=\"btn btn-success btn-block\">Buscar</button>\r\n\r\n            </form>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default WeatherForm;","import React, { Component, Fragment } from 'react';\nimport './App.css';\nimport WeatherInfo from './components/WeatherInfo'\nimport WeatherForm from './components/WeatherForm'\nimport {WEATHER_KEY} from './keys'\n\nclass App extends Component{\n  state = {\n    temperature:'', \n    description:'', \n    humidity:'', \n    wind_speed:'', \n    city:'', \n    country:'', \n    error: null\n  };\n  \n  getWeather = async (e) =>{\n    \n    \n    e.preventDefault();\n    const { city , country } = e.target.elements;\n    const cityValue = city.value;\n    const countryValue = country.value;\n\n    if(cityValue && countryValue){\n      const API_URL =`http://api.openweathermap.org/data/2.5/weather?q=${cityValue},${countryValue}&appid=${WEATHER_KEY}&units=metric`;\n\n      const response = await fetch(API_URL);\n      const data = await response.json();\n  \n  \n      this.setState({\n        temperature: data.main.temp,\n        description: data.weather[0].description,\n        humidity: data.main.humidity, \n        wind_speed: data.wind.speed, \n        city: data.name, \n        country:data.sys.country, \n        error: null\n      });\n    }else{\n      this.setState({error: \"Por favor ingrese una ciudad y un pais\"})\n    }\n\n  }\n  \n  render(){\n  return (\n      <Fragment>\n      \n      <div className=\"container p-4\">\n      \n      <div className=\"contenedor\"> \n        <h1>Rodri Clima </h1>\n        <p>Consulta aqui el pronostico de tu ciudad !</p>\n      </div>\n\n        <div className=\"row\">\n          <div className=\"col-md-6 mx-auto\">\n            <WeatherForm getWeather={this.getWeather} />\n            <WeatherInfo {...this.state} />\n          </div>\n        </div>\n      </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","module.exports = {\r\n    WEATHER_KEY: '3f13fb3d4e89821a66a65d50fea6fea8'\r\n}"],"sourceRoot":""}